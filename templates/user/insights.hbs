<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Insights</title>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="css/styles.css" rel="stylesheet" type="text/css" />
  </head>

  <body class="user-body">
    {{> mobileHeader}}

    <div class="sidebar">
      <div class="sidebar-logo-wrapper">
        <a href="/" class="sidebar-logo-link">
          <img
            src="images/logo2.png"
            loading="lazy"
            alt="Logo"
            class="sidebar-logo"
        /></a>
      </div>
      <div class="nav-divider-basics nav-divider-top"></div>
      <a id="Profile" href="/profile" class="page-link w-inline-block">
        <img loading="lazy" src="images/user.svg" alt="Icon" class="nav-icon" />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Profile</span>
        </div>
      </a>
      <a id="Upload" href="/upload" class="page-link w-inline-block">
        <img
          src="images/file-text.svg"
          loading="lazy"
          alt="Icon"
          class="nav-icon"
        />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Upload</span>
        </div>
      </a>
      <a
        id="Reports"
        href="/reports"
        aria-current="page"
        class="page-link w-inline-block"
        ><img
          src="images/clipboard.svg"
          loading="lazy"
          alt="Icon"
          class="nav-icon"
        />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Reports</span>
        </div>
      </a>
      <a
        id="Insights"
        href="/insights"
        class="page-link w-inline-block w--current"
      >
        <img
          src="images/layout.svg"
          loading="lazy"
          alt="Icon"
          class="nav-icon"
        />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Insights</span>
        </div>
      </a>
      <div class="nav-divider-basics nav-divider-bottom"></div>
      <a href="/how-it-works" class="page-link w-inline-block"
        ><img
          src="images/help-circle.svg"
          loading="lazy"
          alt="Icon"
          class="nav-icon"
        />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Help</span>
        </div>
      </a>
      <a id="Log-out" href="/" class="page-link w-inline-block"
        ><img
          src="images/unlock.svg"
          loading="lazy"
          alt="Icon"
          class="nav-icon"
        />
        <div class="page-link-text-block">
          <span class="page-link-text-span">Log out</span>
        </div>
      </a>
      <div class="sidebar-bottom-spacer"></div>
    </div>

    <section class="demo-header">
      <div class="header-container-2">
        <div>
          <h2 class="heading2">Insights Dashboard</h2>
          <h3 class="subheading"></h3>
          <div class="spacer-block"></div>
        </div>
      </div>
    </section>

    <div class="dashboard-content">
      <div class="dashboard-container">
        <div class="w-layout-grid main-grid">
          <div class="tabs w-tabs">
            <!-- Tab Menu -->
            <div class="in-page-menu w-tab-menu">
              <a
                data-w-tab="Scores"
                class="in-page-link w-inline-block w-tab-link w--current"
              >
                <div class="text-block">Scores</div>
              </a>
              <a
                data-w-tab="Actions"
                class="in-page-link w-inline-block w-tab-link"
              >
                <div class="text-block">Actions</div>
              </a>
              <a
                data-w-tab="Ask"
                class="in-page-link w-inline-block w-tab-link"
              >
                <div class="text-block">Ask</div>
              </a>
            </div>

            <!-- Tab Content -->
            <div class="w-tab-content">
              <!-- Scores Tab -->
              <div data-w-tab="Scores" class="w-tab-pane w--tab-active">
                <div class="wellness-summary-card">
                  <!-- Hidden data element -->
                  <div
                    id="wellnessData"
                    data-scores="{{json scores}}"
                    data-recommendations="{{json recommendations}}"
                    style="display: none"
                  ></div>

                  <div class="wellness-header">
                    <div class="wellness-title-wrapper">
                      <h2 class="insights-title">Wellness Score Inputs</h2>
                      <button
                        class="info-button"
                        aria-label="Show wellness information"
                      >
                        {{> svg/info}}
                      </button>
                    </div>
                  </div>

                  <div class="wellness-content">
                    <!-- Left side: Categories -->
                    <div class="wellness-categories">
                      <!-- Prevention Section -->
                      <div class="category-section">
                        <div class="category-header">
                          <h3>Inputs</h3>
                          <div class="category-score">
                            <span id="totalScore"
                              >{{calculateCompletionPercentage
                              scores.inputs}}</span
                            >%
                          </div>
                        </div>
                        <div class="metric-list">
                          {{#each scores.inputs}}
                          <div class="metric-item" data-metric="{{@key}}">
                            <span class="metric-name">{{@key}}</span>
                            <div class="metric-status">
                              {{#if this}} {{> svg/checkCircle}} {{else}}
                              <span class="incomplete">× </span>
                              {{/if}}
                            </div>
                            <span class="metric-arrow">›</span>
                          </div>
                          <div class="metric-dropdown">
                            <div class="metric-detail">
                              <span class="metric-label">Current Status:</span>
                              <span
                                class="metric-value {{#if this}}status-complete{{else}}status-incomplete{{/if}}"
                              >
                                {{#if this}}Completed{{else}}Incomplete{{/if}}
                              </span>
                            </div>
                            <div class="metric-detail">
                              <span class="metric-label">Description:</span>
                              <span class="metric-value"
                                >Track your {{@key}} to improve your wellness
                                score</span
                              >
                            </div>
                            <div class="metric-detail">
                              <span class="metric-label">Action required:</span>
                              <span class="metric-value">
                                {{#unless this}} Add your {{@key}} information
                                {{else}} Your {{@key}} information is complete
                                {{/unless }}
                              </span>
                            </div>
                            {{#unless this}}
                            <a
                              href="{{getMetricUrl @key}}"
                              class="metric-action"
                              >Update {{@key}}</a
                            >
                            {{/unless }}
                          </div>
                          {{/each}}
                        </div>
                      </div>
                    </div>

                    <!-- Right side: Chart -->
                    <div class="wellness-chart-container">
                      <h3 class="chart-title">Overall Wellness Score</h3>
                      <!-- Update the SVG part -->
                      <div class="chart-wrapper">
                        <svg viewBox="0 0 100 100" class="circular-chart">
                          <!-- Background circle -->
                          <circle cx="50" cy="50" r="45" fill="white" />

                          <!-- Score circle -->
                          <circle
                            cx="50"
                            cy="50"
                            r="26"
                            fill="none"
                            stroke="#eee"
                            stroke-width="6"
                            class="circle-bg"
                          />
                          <circle
                            cx="50"
                            cy="50"
                            r="26"
                            fill="none"
                            stroke-width="6"
                            class="circle-progress"
                            id="scoreCircle"
                          />
                        </svg>

                        <!-- Tooltip -->
                        <div class="chart-tooltip"></div>

                        <!-- Score circle overlaid on chart -->
                        <div class="score-circle">
                          <span class="score-number"
                            >{{calculateCompletionPercentage
                            scores.inputs}}</span
                          >
                          <span class="score-max">/100</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Actions Tab -->
              <div data-w-tab="Actions" class="w-tab-pane">
                <div class="wellness-summary-card">
                  <div class="recommendations-wrapper">
                    <div class="recommendations-header">
                      <h2 class="insights-title">Recommended Actions</h2>
                    </div>
                    <div class="recommendations-list">
                      {{#each recommendations}}
                      <div class="recommendation-item">
                        <span class="recommendation-text">{{this}}</span>
                      </div>
                      {{/each}}
                    </div>
                  </div>
                </div>
              </div>

              <!-- Ask Tab -->
              <div data-w-tab="Ask" class="w-tab-pane">
                <div class="wellness-summary-card">
                  <div class="ask-wrapper">
                    <div class="ask-header">
                      <h2 class="insights-title">Ask Reed</h2>
                      <button
                        class="info-button"
                        aria-label="Show RAG information"
                      >
                        {{> svg/info}}
                      </button>
                    </div>

                    <!-- Chat interface container -->
                    <div class="chat-container">
                      <!-- Messages will appear here -->
                      <div id="chat-messages" class="chat-messages">
                        <div class="chat-message system-message">
                          <div class="message-content">
                            <p>
                              Hi there! I'm Reed, your health assistant. I can
                              answer questions about cardiovascular health,
                              cholesterol, exercise, and other health topics.
                              How can I help you today?
                            </p>
                          </div>
                        </div>
                      </div>

                      <!-- Input area -->
                      <div class="chat-input-container">
                        <textarea
                          id="chat-input"
                          class="chat-input"
                          placeholder="Ask me about health topics..."
                          rows="1"
                        ></textarea>
                        <button id="chat-submit" class="chat-submit-btn">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <line x1="22" y1="2" x2="11" y2="13"></line>
                            <polygon
                              points="22 2 15 22 11 13 2 9 22 2"
                            ></polygon>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    {{!-- Wellness Info Modal--}}
    <div class="modal-wrapper modal-wrapper-1">
      <div class="modal-background"></div>
      <div class="modal-card">
        <div class="modal-header">
          <a
            class="modal-return-button w-inline-block w--current"
            aria-current="page"
          >
            {{> svg/backArrow}}
          </a>
          <h1 class="modal-button">Wellness Indicators</h1>
        </div>

        <div class="modal-description">
          These "Wellness Scores" are a simple estimation of how well you're
          doing at preventive health. Each preventive action is backed by hard
          science, and you can follow the hyperlinks in each description to
          learn more from the source. Don't worry if your score is low. This
          usually just means you haven't entered much data or connected many
          sources yet. To get the most out of your Wellness Score, click into
          each score factor to learn what data you need to add and how to
          improve it.
        </div>

        <div class="modal-footer">
          <a
            href="/insights"
            aria-current="page"
            class="cancel-button cancel-space"
            >Close</a
          >
        </div>
      </div>
    </div>

    {{!-- Wellness Metrics Modal--}}
    <div class="modal-wrapper modal-wrapper-6">
      <div class="modal-background"></div>
      <div class="modal-card wellness-metrics">
        <div class="modal-header">
          <a
            class="modal-return-button w-inline-block w--current"
            data-w-id="e51537ba-0bb8-7d9d-b7be-455102aac1f4"
            aria-current="page"
          >
            {{> svg/backArrow}}
          </a>
          <h1 class="modal-button">Wellness Score</h1>
          <div class="score-circle">0</div>
        </div>

        <div class="metrics-section">
          <h2 class="metrics-heading">Prevention</h2>
          <div class="metrics-list">
            <div class="metric-item">
              <span>Medical checkup • last 2 years</span>
              <span class="metric-status">✕</span>
              <span class="metric-arrow">›</span>
            </div>
            <!-- Add other prevention metrics similarly -->
          </div>

          <h2 class="metrics-heading">Monitoring</h2>
          <div class="metrics-list">
            <div class="metric-item">
              <span>Active provider connection</span>
              <span class="metric-status">✕</span>
              <span class="metric-arrow">›</span>
            </div>
            <!-- Add other monitoring metrics -->
          </div>

          <h2 class="metrics-heading">Actions</h2>
          <div class="metrics-list">
            <div class="metric-item">
              <span>Sleep 7+ hours daily • last 7 days</span>
              <span class="metric-arrow">›</span>
            </div>
            <!-- Add other action metrics -->
          </div>
        </div>
        <div class="metrics-footer">
          <small>Click on a score factor above to see details</small>
          <small>Factors are personalized by age and sex</small>
          <small
            >The score is mainly preventive, it is not a complete picture of
            your health</small
          >
          <small
            >New factors and personal insights will be added over time</small
          >
        </div>
      </div>
    </div>

    <section class="background report-background">
      <div class="w-layout-blockcontainer container-4 w-container"></div>
    </section>
    <script
      src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=6606de22e8c152e6b19be98a"
      type="text/javascript"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
      crossorigin="anonymous"
    ></script>
    <script src="js/main.js" type="text/javascript"></script>
    <script src="js/wellnessScore.js" type="text/javascript"></script>
    <script>
      // modals

      // Info button modal
      document.querySelector(".info-button").addEventListener("click", () => {
        document.querySelector(".modal-wrapper-1").classList.add("active");
      });

      // Wellness metrics modal
      document
        .querySelector(".edit-button-modal")
        .addEventListener("click", (e) => {
          e.preventDefault();
          document.querySelector(".modal-wrapper-6").classList.add("active");
        });

      // Close handlers
      document
        .querySelectorAll(".modal-background, .cancel-button")
        .forEach((element) => {
          element.addEventListener("click", () => {
            document
              .querySelectorAll(".modal-wrapper-1, .modal-wrapper-6")
              .forEach((modal) => {
                modal.classList.remove("active");
              });
          });
        });

      // Return button
      document.querySelectorAll(".modal-return-button").forEach((button) => {
        button.addEventListener("click", () => {
          document
            .querySelectorAll(".modal-wrapper-1, .modal-wrapper-6")
            .forEach((modal) => {
              modal.classList.remove("active");
            });
        });
      });
    </script>
    <script>
      // wellness chart animations
      // Add this to your existing wellness chart animations script
      function updateScoreCircle(score) {
        const circle = document.getElementById("scoreCircle");
        const scoreCircleElement = document.getElementById(".score-circle");

        // Calculate circle properties
        const radius = 26;
        const circumference = 2 * Math.PI * radius;
        // Calculate offset (reversed to fill clockwise from top)
        const offset = ((100 - score) / 100) * circumference;

        // Set circle properties
        circle.style.strokeDasharray = `${circumference} ${circumference}`;
        circle.style.strokeDashoffset = offset;

        // Set color based on score
        let color;
        if (score >= 75) {
          color = "#71b871"; // Green
        } else if (score >= 50) {
          color = "#ffd700"; // Yellow
        } else {
          color = "#ff6b6b"; // Red
        }

        circle.style.stroke = color;
        scoreCircleElement.style.borderColor = color;
      }

      // Initialize when page loads
      document.addEventListener("DOMContentLoaded", function () {
        // Get the score from the totalScore element that was rendered from server
        const score = parseInt(
          document.getElementById("totalScore").textContent
        );

        // Update the circle display
        document.querySelector(".score-number").textContent = score;
        updateScoreCircle(score);
      });
    </script>
    <script>
      // metric dropdown
      document.addEventListener("DOMContentLoaded", function () {
        // Get all metric items
        const metricItems = document.querySelectorAll(".metric-item");

        // Add click event listener to each metric item
        metricItems.forEach((metricItem) => {
          metricItem.addEventListener("click", function () {
            // Toggle active class on the clicked metric item
            this.classList.toggle("active");

            // Get the metric dropdown element (it follows the metric item in DOM)
            const metricDropdown = this.nextElementSibling;

            // If dropdown doesn't exist, we don't need to do anything
            if (
              !metricDropdown ||
              !metricDropdown.classList.contains("metric-dropdown")
            ) {
              return;
            }

            // Toggle the dropdown visibility
            if (this.classList.contains("active")) {
              metricDropdown.style.maxHeight =
                metricDropdown.scrollHeight + "px";
              metricDropdown.style.opacity = "1";
            } else {
              metricDropdown.style.maxHeight = "0";
              metricDropdown.style.opacity = "0";
            }

            // Close other open dropdowns
            metricItems.forEach((item) => {
              if (item !== this && item.classList.contains("active")) {
                item.classList.remove("active");
                const dropdown = item.nextElementSibling;
                if (
                  dropdown &&
                  dropdown.classList.contains("metric-dropdown")
                ) {
                  dropdown.style.maxHeight = "0";
                  dropdown.style.opacity = "0";
                }
              }
            });
          });
        });
      });
    </script>
    <script>
      // RAG Chat functionality
      // Add this to your existing script section or create a new one
      document.addEventListener("DOMContentLoaded", function () {
        const chatMessages = document.getElementById("chat-messages");
        const chatInput = document.getElementById("chat-input");
        const chatSubmit = document.getElementById("chat-submit");

        // Auto-resize textarea
        chatInput.addEventListener("input", function () {
          this.style.height = "auto";
          this.style.height = this.scrollHeight + "px";
        });

        // Submit on Enter (but allow Shift+Enter for new lines)
        chatInput.addEventListener("keydown", function (e) {
          if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            submitMessage();
          }
        });

        // Submit button click
        chatSubmit.addEventListener("click", submitMessage);

        function submitMessage() {
          const message = chatInput.value.trim();
          if (!message) return;

          // Add user message to chat
          addMessage(message, "user");

          // Clear input
          chatInput.value = "";
          chatInput.style.height = "auto";

          // Show typing indicator
          addTypingIndicator();

          // Send to RAG API
          sendToRAG(message);
        }

        function addMessage(message, sender) {
          const messageDiv = document.createElement("div");
          messageDiv.className = `chat-message ${sender}-message`;

          const messageContent = document.createElement("div");
          messageContent.className = "message-content";

          // Parse markdown-like formatting for code blocks and links
          const formattedText = formatMessage(message);
          messageContent.innerHTML = `<p>${formattedText}</p>`;

          messageDiv.appendChild(messageContent);
          chatMessages.appendChild(messageDiv);

          // Scroll to bottom
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function formatMessage(text) {
          // Handle code blocks (```code```)
          text = text.replace(
            /```([\s\S]*?)```/g,
            "<pre><code>$1</code></pre>"
          );

          // Handle inline code (`code`)
          text = text.replace(/`([^`]+)`/g, "<code>$1</code>");

          // Handle links
          text = text.replace(
            /\[(.*?)\]\((.*?)\)/g,
            '<a href="$2" target="_blank">$1</a>'
          );

          // Handle line breaks
          text = text.replace(/\n/g, "<br>");

          return text;
        }

        function addTypingIndicator() {
          const typingDiv = document.createElement("div");
          typingDiv.className = "chat-message assistant-message typing";
          typingDiv.innerHTML = `
      <div class="typing-indicator">
        <span></span>
        <span></span>
        <span></span>
      </div>
    `;
          chatMessages.appendChild(typingDiv);
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function removeTypingIndicator() {
          const typingIndicator = document.querySelector(".typing");
          if (typingIndicator) {
            typingIndicator.remove();
          }
        }

        async function sendToRAG(query) {
          try {
            const response = await fetch("/api/rag/ask", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });

            const data = await response.json();

            // Remove typing indicator
            removeTypingIndicator();

            // Add response to chat
            addMessage(data.response, "assistant");

            // Store sources for info button
            window.lastSources = data.sources;
          } catch (error) {
            console.error("Error:", error);
            removeTypingIndicator();
            addMessage(
              "Sorry, I couldn't process your request. Please try again later.",
              "assistant"
            );
          }
        }

        // Add info button functionality to show sources
        document
          .querySelector('[data-w-tab="Ask"] .info-button')
          .addEventListener("click", function () {
            showChatInfoModal();
          });

        function showChatInfoModal() {
          // Create sources HTML if available
          let sourcesHTML = "";
          if (window.lastSources && window.lastSources.length > 0) {
            sourcesHTML = "<h3>Last Query Sources:</h3>";
            window.lastSources.forEach((source) => {
              sourcesHTML += `
          <div class="source-item">
            <div class="source-title">${source.title}</div>
            <div class="source-similarity">Relevance: ${Math.round(
              source.similarity * 100
            )}%</div>
          </div>
        `;
            });
          }

          // Show modal with chat info and sources
          const modal = document.createElement("div");
          modal.id = "chatInfoModal";
          modal.className = "modal-wrapper modal-wrapper-1 active";
          modal.innerHTML = `
      <div class="modal-background"></div>
      <div class="modal-card">
        <div class="modal-header">
          <a class="modal-return-button w-inline-block w--current" aria-current="page">
            {{> svg/backArrow}}
          </a>
          <h1 class="modal-button">About Reed</h1>
        </div>
        <div class="modal-description">
          <p>Reed is your health knowledge assistant powered by retrieval-augmented generation (RAG). Reed only provides information based on trusted health resources in our database.</p>
          <p>Unlike generic AI chatbots, Reed doesn't make things up - it will only answer with information it can find in reliable sources.</p>
          ${sourcesHTML}
        </div>
        <div class="modal-footer">
          <a class="cancel-button cancel-space">Close</a>
        </div>
      </div>
    `;

          document.body.appendChild(modal);

          // Add event listeners to close modal
          modal
            .querySelector(".modal-background")
            .addEventListener("click", () => modal.remove());
          modal
            .querySelector(".cancel-button")
            .addEventListener("click", () => modal.remove());
          modal
            .querySelector(".modal-return-button")
            .addEventListener("click", () => modal.remove());
        }
      });
    </script>
  </body>
</html>
