<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Profile</title>
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <link href="css/styles.css" rel="stylesheet" type="text/css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>

<body class="user-body">
  {{> mobileHeader}}
  <div class="sidebar">
    <div class="sidebar-logo-wrapper">
      <a href="/" class="sidebar-logo-link">
        <img src="images/logo2.png" loading="lazy" alt="Logo" class="sidebar-logo"></a>
    </div>
    <div class="nav-divider-basics nav-divider-top"></div>
    <a id="Profile" href="/profile" class="page-link w-inline-block w--current">
      <img loading="lazy" src="images/user.svg" alt="Icon" class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Profile</span></div>
    </a>
    <a id="Upload" href="/upload" class="page-link w-inline-block">
      <img src="images/file-text.svg" loading="lazy" alt="Icon" class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Upload</span></div>
    </a>
    <a id="Reports" href="/reports" aria-current="page" class="page-link w-inline-block"><img src="images/clipboard.svg"
        loading="lazy" alt="Icon" class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Reports</span></div>
    </a>
    <a id="Dashboard" href="/dashboard" class="page-link w-inline-block">
      <img src="images/layout.svg" loading="lazy" alt="Icon" class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Dashboard</span></div>
    </a>
    <div class="nav-divider-basics nav-divider-bottom"></div>
    <a href="/how-it-works" class="page-link w-inline-block"><img src="images/help-circle.svg" loading="lazy" alt="Icon"
        class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Help</span></div>
    </a>
    <a id="Log-out" href="/" class="page-link w-inline-block"><img src="images/unlock.svg" loading="lazy" alt="Icon"
        class="nav-icon">
      <div class="page-link-text-block"><span class="page-link-text-span">Log out</span></div>
    </a>
    <div class="sidebar-bottom-spacer"></div>
  </div>
  <section class="demo-header">
    <div class="header-container-2">
      <div>
        <h2 class="heading2">Profile</h2>
        <h3 class="subheading">Hello {{fname}} {{lname}}</h3>
        <div class="spacer-block"></div>
      </div>
    </div>
  </section>
  <div class="dashboard-content">
    <div class="dashboard-container">
      <div class="w-layout-grid main-grid">
        <div class="w-tabs" data-duration-in="300" data-duration-out="100">
          <div class="in-page-menu">
            <a data-w-tab="Basic Info" class="in-page-link w-inline-block w-tab-link w--current">
              <div class="text-block-4">Basic Info</div>
            </a>
            <a data-w-tab="History" class="in-page-link w-inline-block w-tab-link">
              <div class="text-block-5">History</div>
            </a>
            <a data-w-tab="Lifestyle" class="in-page-link w-inline-block w-tab-link">
              <div class="text-block-5">Lifestyle</div>
            </a>
          </div>
          <div class="w-tab-content">
            <div data-w-tab="Basic Info" class="w-tab-pane w--tab-active">
              <div class="dropdown-wrapper user-content-bg">
                <div class="header-container-3">
                  <h1 class="username-heading">
                    <span id="uname">
                      {{#if uname}}{{uname}}{{else}}-{{/if}}
                    </span>
                  </h1>
                  {{!-- <img src="../../public/images/edit-icon.svg" alt="Edit Icon" class="edit-icon" /> --}}
                  <svg class="edit-icon" data-w-id="b0d1b8fd-a0bc-a9b0-1b2d-f52c65a24a78"
                    xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewbox="0 0 24 25" fill="none"
                    app="ikonik">
                    <path
                      d="M21.2999 12.0761C20.7999 11.5761 20.1999 11.3761 19.4999 11.3761C18.8999 11.3761 18.1999 11.5761 17.6999 12.0761L15.9999 13.8761L15.3999 14.4761L14.7999 15.0761L12.3999 17.4761C11.3999 18.4761 10.6999 19.8761 10.5999 21.2761C10.5999 21.5761 10.4999 21.7761 10.4999 22.0761C10.4999 22.5761 10.8999 22.8761 11.2999 22.8761C12.3999 22.8761 13.4999 22.5761 14.4999 22.0761C14.9999 21.7761 15.4999 21.4761 15.8999 20.9761L18.8999 17.9761L19.4999 17.3761L21.2999 15.5761C21.7999 15.0761 21.9999 14.4761 21.9999 13.7761C21.9999 13.1761 21.6999 12.5761 21.2999 12.0761Z"
                      fill="currentColor" app="ikonik" class="path-s2hh9"></path>
                    <path
                      d="M8.79996 21.276C8.99996 19.376 9.79996 17.676 11.2 16.276L15 12.476C15.8 11.676 16.4 10.676 16.6 9.57604C16.7 8.67604 16.6 7.67604 16.4 6.97604C15.7 4.77604 13.7 3.07604 11.3 2.97604C8.09996 2.87604 5.49996 5.37604 5.49996 8.57604C5.49996 10.476 6.39996 12.076 7.79996 13.076C5.29996 13.976 3.29996 15.876 2.19996 18.376C1.79996 19.376 1.89996 20.476 2.49996 21.376C3.19996 22.376 4.19996 22.976 5.39996 22.976H8.89996C8.79996 22.676 8.69996 22.476 8.69996 22.176C8.69996 21.876 8.79996 21.576 8.79996 21.276Z"
                      fill="currentColor" app="ikonik" class="path-09e0u"></path>
                  </svg>
                </div>
                <div class="form-info"><strong>Age:</strong>
                  <span id="ageDisplay">
                    {{#if profile.age}}{{profile.age}}{{else}}-{{/if}}
                  </span>
                </div>
                <div class="form-info"><strong>Blood Type:</strong>
                  <span id="bloodTypeDisplay">
                    {{#ifEqual profile.bloodType "Other"}}
                    {{profile.customBloodType}}
                    {{else}}
                    {{profile.bloodType}}
                    {{/ifEqual}}
                  </span>
                </div>
                <br>
                {{!-- <div class="form-info">Sex:<span id="sexDisplay">-</span></div> --}}
              </div>
              <a data-w-id="65b6bed8-11da-b724-4dff-815803cad964" href="#" class="edit-button-modal w-inline-block">
                <div class="button-text">+ Update Basic Info</div>
              </a>
            </div>

            <div data-w-tab="History" class="w-tab-pane">
              <div class="dropdown-wrapper user-content-bg">
                <div class="header-container-3">
                  <h1 class="username-heading">Family History</h1>
                </div>
                <div class="history-info">
                  {{#if profile.familyHistory.length}}
                  {{#each profile.familyHistory}}
                  <div class="family-history-entry">
                    <div class="form-info">
                      <p><strong>Condition:</strong> {{familyCondition}}</p>
                    </div>
                    <div class="form-info">
                      <p><strong>Relative(s) Impacted:</strong>
                        {{#each relatives}}
                        {{this}}{{#unless @last}}, {{/unless}}
                        {{/each}}
                      </p>
                    </div>
                    <div class="form-info">
                      <p><strong>Notes:</strong> {{addNotes}}</p>
                    </div>
                    <div>
                      <button type="button" class="edit-entry-button" data-id="{{_id}}">Edit</button>
                      <button type="button" class="delete-entry-button" data-id="{{_id}}">Delete</button>
                    </div>
                  </div>
                  {{/each}}
                  {{else}}
                  <div class="form-info">No family history or genetic conditions reported</div>
                  {{/if}}
                </div>
              </div>
              <a data-w-id="c8ca94ba-1795-c52c-c05a-743d4de0b7f5" href="#" class="edit-button-modal w-inline-block">
                <div class="button-text">+ Add Family History</div>
              </a>
            </div>

            <div data-w-tab="Lifestyle" class="w-tab-pane">
              <div class="dropdown-wrapper user-content-bg">
                <div class="header-container-3">
                  <h1 class="username-heading">Lifestyle</h1>
                </div>
                <div class="history-info">
                  {{#if profile.lifestyle.length}}
                  {{#each profile.lifestyle}}
                  <div class="lifestyle-entry">
                    <div class="form-info">
                      <p><strong>Habit Type:</strong> {{habitType}}</p>
                    </div>
                    <div class="form-info">
                      <p><strong>Status:</strong> {{status}}</p>
                    </div>
                    <div class="form-info">
                      <p><strong>Notes:</strong> {{lifestyleNotes}}</p>
                    </div>
                    <div>
                      <button type="button" class="edit-entry-button" data-id="{{_id}}">Edit</button>
                      <button type="button" class="delete-entry-button" data-id="{{_id}}">Delete</button>
                    </div>
                  </div>
                  {{/each}}
                  {{else}}
                  <div class="form-info">No lifestyle habits recorded</div>
                  {{/if}}
                </div>
              </div>
              <a data-w-id="6caf6800-67a3-949e-e379-02601e73d169" href="#" class="edit-button-modal w-inline-block">
                <div class="button-text">+ Add lifestyle habits</div>
              </a>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal-wrapper modal-wrapper-1">
    <div data-w-id="011290f5-9255-314e-1af6-5f17a8b6d4dd" class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-header">
        <a class="modal-return-button w-inline-block w--current" data-w-id="e51537ba-0bb8-7d9d-b7be-455102aac1f4"
          href="/profile" aria-current="page">
          <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewbox="0 0 24 24" fill="none" app="ikonik"
            class="back-icon">
            <defs app="ikonik">
              <clippath app="ikonik">
                <rect width="24" height="24" fill="currentColor" app="ikonik" class="rect-hkbnx"></rect>
              </clippath>
            </defs>
            <g clip-path="url(#clip0_6_13443)" app="ikonik">
              <path d="M11.67 3.8701L9.9 2.1001L0 12.0001L9.9 21.9001L11.67 20.1301L3.54 12.0001L11.67 3.8701Z"
                fill="currentColor" app="ikonik" class="path-ky26q"></path>
            </g>
          </svg></a>
        <h1 class="modal-button">Edit Profile</h1>
      </div>
      <form class="modal-form" id="basicInfoForm" method="post" action="/update-profile">
        <label for="fname" class="field-label">First Name</label>
        <input class="form-text-field" name="fname" id="fname" aria-label="First Name" aria-required="true"
          maxlength="256" type="text" required="" value="{{#if fname}}{{fname}}{{/if}}">

        <label for="lname" class="field-label">Last Name</label>
        <input class="form-text-field" name="lname" id="lname" aria-label="Last Name" aria-required="true"
          maxlength="256" name="Last Name" placeholder="" type="text" required=""
          value="{{#if lname}}{{lname}}{{/if}}" />

        <label for="birthDate" class="field-label">Birth Date</label>
        <input class="form-text-field" name="birthDate" id="birthDate" maxlength="256" placeholder="" type="date"
          required="" value="{{#if profile.birthDate}}{{formatDate profile.birthDate}}{{/if}}">

        <label id="sex-label" class="field-label">Sex (at birth)</label>
        <div class="sex-container" role="group" aria-labelledby="sex-label">
          <button type="button" class="profile-modal-button" data-value="Male" id="sex-male" {{#ifEqual
            profile.sex 'Male' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual profile.sex 'Male'}}true{{else}}false{{/ifEqual}}">Male</button>
          <button type="button" class="profile-modal-button" data-value="Female" id="sex-female" {{#ifEqual
            profile.sex 'Female' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual profile.sex 'Female'}}true{{else}}false{{/ifEqual}}">Female</button>
          <button type="button" class="profile-modal-button" data-value="Other" id="sex-other" {{#ifEqual
            profile.sex 'Other' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual profile.sex 'Other'}}true{{else}}false{{/ifEqual}}">Other</button>
          <input type="hidden" name="sex" id="sex" value="{{profile.sex}}" aria-hidden="true">
        </div>

        <label for="bloodType" class="field-label">Blood Type</label>
        <select class="bloodType" name="bloodType" id="bloodType" onchange="checkBloodType()">
          <option value="Unknown" {{#ifEqual profile.bloodType 'Unknown' }}selected{{/ifEqual}}>Unknown</option>
          <option value="A+" {{#ifEqual profile.bloodType 'A+' }}selected{{/ifEqual}}>A+</option>
          <option value="A-" {{#ifEqual profile.bloodType 'A-' }}selected{{/ifEqual}}>A-</option>
          <option value="B+" {{#ifEqual profile.bloodType 'B+' }}selected{{/ifEqual}}>B+</option>
          <option value="B-" {{#ifEqual profile.bloodType 'B-' }}selected{{/ifEqual}}>B-</option>
          <option value="O+" {{#ifEqual profile.bloodType 'O+' }}selected{{/ifEqual}}>O+</option>
          <option value="O-" {{#ifEqual profile.bloodType 'O-' }}selected{{/ifEqual}}>O-</option>
          <option value="AB+" {{#ifEqual profile.bloodType 'AB+' }}selected{{/ifEqual}}>AB+</option>
          <option value="AB-" {{#ifEqual profile.bloodType 'AB-' }}selected{{/ifEqual}}>AB-</option>
          <option value="Other" {{#ifEqual profile.bloodType 'Other' }}selected{{/ifEqual}}>Other</option>
        </select>
        <div class="customBloodTypeContainer">
          <label for="customBloodType" class="field-label">Other Blood Types:</label>
          <input class="form-text-field" name="customBloodType" id="customBloodType" aria-label="Custom Blood Type"
            aria-required="true" maxlength="256" type="text"
            value="{{#if profile.customBloodType}}{{profile.customBloodType}}{{/if}}">
        </div>
        <div class="modal-footer">
          <a data-w-id="83409733-ee47-3f3e-601a-82279939ac12" href="/profile" aria-current="page"
            class="cancel-button">Cancel</a>
          <input type="submit" class="profile-button save" value="Save" aria-label="Save Profile Changes" />
        </div>
      </form>
      <div class="w-form-done">
        <div>Thank you! Your submission has been received!</div>
      </div>
      <div class="w-form-fail">
        <div>Oops! Something went wrong while submitting the form.</div>
      </div>
    </div>
  </div>

  </div>
  <div class="modal-wrapper modal-wrapper-2">
    <div data-w-id="41ca9b8f-4431-5ecc-bd68-c6d4e55deb39" class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-header">
        <a data-w-id="41ca9b8f-4431-5ecc-bd68-c6d4e55deb3c" href="/profile" aria-current="page"
          class="modal-return-button w-inline-block w--current">
          <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewbox="0 0 24 24" fill="none" app="ikonik"
            class="back-icon">
            <defs app="ikonik">
              <clippath app="ikonik">
                <rect width="24" height="24" fill="currentColor" app="ikonik" class="rect-hkbnx"></rect>
              </clippath>
            </defs>
            <g clip-path="url(#clip0_6_13443)" app="ikonik">
              <path d="M11.67 3.8701L9.9 2.1001L0 12.0001L9.9 21.9001L11.67 20.1301L3.54 12.0001L11.67 3.8701Z"
                fill="currentColor" app="ikonik" class="path-ky26q"></path>
            </g>
          </svg></a>
        <h1 class="modal-button">Family History</h1>
      </div>
      <form class="modal-form" id="familyHistoryForm" name="familyHistoryForm" method="post" action="/update-profile">
        <label for="familyCondition" class="field-label">Condition</label>
        <input class="form-text-field" name="familyCondition" id="familyCondition" maxlength="256" placeholder=""
          type="text"
          value="{{#if profile.familyHistory.[0].familyCondition}}{{profile.familyHistory.[0].familyCondition}}{{/if}}" />

        <label id="relatives-label" class="field-label">Relatives Impacted</label>
        <div class="relatives-container" role="group" aria-labelledby="relatives-label">
          <button type="button" class="profile-modal-button" data-value="Mother" id="relatives-mother" {{#ifEqual
            this 'Mother' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Mother'}}true{{else}}false{{/ifEqual}}">Mother</button>
          <button type="button" class="profile-modal-button" data-value="Father" id="relatives-father" {{#ifEqual
            this 'Father' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Father'}}true{{else}}false{{/ifEqual}}">Father</button>
          <button type="button" class="profile-modal-button" data-value="Grandparent" id="relatives-grandparent"
            {{#ifEqual this 'Grandparent' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Grandparent'}}true{{else}}false{{/ifEqual}}">Grandparent</button>
          <button type="button" class="profile-modal-button" data-value="Sibling" id="relatives-sibling" {{#ifEqual
            this 'Sibling' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Sibling'}}true{{else}}false{{/ifEqual}}">Sibling</button>
          <button type="button" class="profile-modal-button" data-value="Aunt" id="relatives-aunt" {{#ifEqual
            this 'Aunt' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Aunt'}}true{{else}}false{{/ifEqual}}">Aunt</button>
          <button type="button" class="profile-modal-button" data-value="Uncle" id="relatives-uncle" {{#ifEqual
            this 'Uncle' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Uncle'}}true{{else}}false{{/ifEqual}}">Uncle</button>
          <button type="button" class="profile-modal-button" data-value="Cousin" id="relatives-cousin" {{#ifEqual
            this 'Cousin' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Cousin'}}true{{else}}false{{/ifEqual}}">Cousin</button>
          <button type="button" class="profile-modal-button" data-value="Child" id="relatives-child" {{#ifEqual
            this 'Child' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Child'}}true{{else}}false{{/ifEqual}}">Child</button>
          <button type="button" class="profile-modal-button" data-value="Other" id="relatives-other" {{#ifEqual
            this 'Other' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Other'}}true{{else}}false{{/ifEqual}}">Other</button>
        </div>
        <input type="hidden" name="relatives" id="relatives"
          value="{{#if profile.familyHistory.[0].relatives}}{{profile.familyHistory.[0].relatives}}{{/if}}">

        <label for="addNotes" class="field-label">Add Notes</label>
        <input class="form-text-field" maxlength="256" name="addNotes" placeholder="" type="text" id="addNotes"
          value="{{#if profile.familyHistory.[0].addNotes}}{{profile.familyHistory.[0].addNotes}}{{/if}}"
          aria-hidden="true" />

        <div class="modal-footer">
          <a href="/profile" aria-current="page" class="cancel-button">Cancel</a>
          <input type="submit" class="profile-button save" value="Save" aria-label="Save Profile Changes" />
        </div>
      </form>
      <div class="w-form-done">
        <div>Thank you! Your submission has been received!</div>
      </div>
      <div class="w-form-fail">
        <div>Oops! Something went wrong while submitting the form.</div>
      </div>
    </div>
  </div>

  <div class="modal-wrapper modal-wrapper-3">
    <div data-w-id="40ffae57-f195-d2e7-75f9-2c5c8c8a26c4" class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-header">
        <a data-w-id="40ffae57-f195-d2e7-75f9-2c5c8c8a26c7" href="/profile" aria-current="page"
          class="modal-return-button w-inline-block w--current">
          <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewbox="0 0 24 24" fill="none" app="ikonik"
            class="back-icon">
            <defs app="ikonik">
              <clippath app="ikonik">
                <rect width="24" height="24" fill="currentColor" app="ikonik" class="rect-hkbnx"></rect>
              </clippath>
            </defs>
            <g clip-path="url(#clip0_6_13443)" app="ikonik">
              <path d="M11.67 3.8701L9.9 2.1001L0 12.0001L9.9 21.9001L11.67 20.1301L3.54 12.0001L11.67 3.8701Z"
                fill="currentColor" app="ikonik" class="path-ky26q"></path>
            </g>
          </svg></a>
        <h1 class="modal-button">Lifestyle</h1>
      </div>
      <form class="modal-form" id="lifestyleForm" id="lifestyleForm" method="post" action="/update-profile">
        <label for="habitType" class="field-label">Habit Type</label>
        <input class="form-text-field" name="habitType" id="habitType" maxlength="256" placeholder="" type="text"
          value="{{#if profile.lifestyle.[0].habitType}}{{profile.lifestyle.[0].habitType}}{{/if}}" />

        <label id="status-label" class="field-label">Status</label>
        <div class="status-container" role="group" aria-labelledby="status-label">
          <button type="button" class="profile-modal-button" data-value="Every day" id="status-everyday" {{#ifEqual
            this 'Everyday' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Everyday'}}true{{else}}false{{/ifEqual}}">Every day</button>
          <button type="button" class="profile-modal-button" data-value="Some days" id="status-somedays" {{#ifEqual
            this 'Somedays' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Somedays'}}true{{else}}false{{/ifEqual}}">Some day</button>
          <button type="button" class="profile-modal-button" data-value="Used to" id="status-usedto" {{#ifEqual
            this 'Usedto' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Usedto'}}true{{else}}false{{/ifEqual}}">Used to</button>
          <button type="button" class="profile-modal-button" data-value="Never" id="status-never" {{#ifEqual
            this 'Never' }}data-selected="true" {{/ifEqual}}
            aria-pressed="{{#ifEqual this 'Never'}}true{{else}}false{{/ifEqual}}">Never</button>
        </div>
        <input type="hidden" name="status" id="status"
          value="{{#if profile.lifestyle.[0].status}}{{profile.lifestyle.[0].status}}{{/if}}">

        <label for="lifestyleNotes" class="field-label">Add Notes</label>
        <input class="form-text-field" maxlength="256" name="lifestyleNotes" placeholder="" type="text"
          id="lifestyleNotes"
          value="{{#if profile.lifestyle.[0].lifestyleNotes}}{{profile.lifestyle.[0].lifestyleNotes}}{{/if}}"
          aria-hidden="true" />

        <div class="modal-footer">
          <a href="/profile" aria-current="page" class="cancel-button">Cancel</a>
          <input type="submit" class="profile-button save" value="Save" aria-label="Save Profile Changes" />
        </div>
      </form>
      <div class="w-form-done">
        <div>Thank you! Your submission has been received!</div>
      </div>
      <div class="w-form-fail">
        <div>Oops! Something went wrong while submitting the form.</div>
      </div>
    </div>
  </div>

  <script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=6606de22e8c152e6b19be98a"
    type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Your edit button script should come after jQuery -->
  <script src="js/main.js" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // ====== Modal Management Functions ======
      function closeModal(modal) {
        modal.style.opacity = '0';
        modal.style.visibility = 'hidden';
        modal.style.display = 'none';
      }

      function openModal(modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
          modal.style.opacity = '1';
          modal.style.visibility = 'visible';
        }, 10);
      }

      function clearFamilyHistoryForm() {
        const form = document.getElementById('familyHistoryForm');
        form.reset();

        // Clear any hidden fields
        const actionInput = form.querySelector('#action');
        const entryIdInput = form.querySelector('#entryId');
        if (actionInput) actionInput.remove();
        if (entryIdInput) entryIdInput.remove();

        // Reset all relative buttons
        form.querySelectorAll('.profile-modal-button').forEach(btn => {
          btn.removeAttribute('data-selected');
          btn.setAttribute('aria-pressed', 'false');
        });

        // Clear the hidden relatives input
        const relativesInput = document.getElementById('relatives');
        if (relativesInput) relativesInput.value = '';

        // Clear condition and notes
        document.getElementById('familyCondition').value = '';
        document.getElementById('addNotes').value = '';
      }

      function clearLifestyleForm() {
        const form = document.getElementById('lifestyleForm');
        form.reset();

        // Clear any hidden fields
        const actionInput = form.querySelector('#action');
        const entryIdInput = form.querySelector('#entryId');
        if (actionInput) actionInput.remove();
        if (entryIdInput) entryIdInput.remove();

        // Reset all relative buttons
        form.querySelectorAll('.profile-modal-button').forEach(btn => {
          btn.removeAttribute('data-selected');
          btn.setAttribute('aria-pressed', 'false');
        });

        // Clear the hidden relatives input
        const statusInput = document.getElementById('status');
        if (statusInput) statusInput.value = '';

        // Clear condition and notes
        document.getElementById('habitType').value = '';
        document.getElementById('lifestyleNotes').value = '';
      }

      // ====== Form Utility Functions ======
      function checkBloodType() {
        const bloodTypeSelect = document.getElementById('bloodType');
        const customBloodTypeInput = document.getElementById('customBloodType');
        if (bloodTypeSelect.value === 'Other') {
          customBloodTypeInput.style.display = 'block';
          customBloodTypeInput.setAttribute('required', 'true');
        } else {
          customBloodTypeInput.style.display = 'none';
          customBloodTypeInput.removeAttribute('required');
        }
      }

      checkBloodType(); // Handle initial state if 'Other' is already selected

      // ====== Event Listeners ======
      // Modal trigger buttons
      const editIconButton = document.querySelector('[data-w-id="b0d1b8fd-a0bc-a9b0-1b2d-f52c65a24a78"]');
      const updateProfileButton = document.querySelector('[data-w-id="65b6bed8-11da-b724-4dff-815803cad964"]');
      const addFamilyHistoryButton = document.querySelector('[data-w-id="c8ca94ba-1795-c52c-c05a-743d4de0b7f5"]');
      const addLifestyleButton = document.querySelector('[data-w-id="6caf6800-67a3-949e-e379-02601e73d169"]');

      // Family History edit entry functionality
      document.querySelectorAll('.family-history-entry .edit-entry-button').forEach(button => {
        button.addEventListener('click', async function () {
          console.log('Family History Edit button clicked');
          const entryId = this.getAttribute('data-id');
          const entry = this.closest('.family-history-entry');

          try {
            const conditionElement = entry.querySelector('.form-info:nth-child(1) p');
            const relativesElement = entry.querySelector('.form-info:nth-child(2) p');
            const notesElement = entry.querySelector('.form-info:nth-child(3) p');

            if (!conditionElement || !relativesElement || !notesElement) {
              throw new Error('Could not find all required elements');
            }

            const condition = conditionElement.textContent.replace('Condition:', '').trim();
            const relativesStr = relativesElement.textContent.replace('Relative(s) Impacted:', '').trim();
            const notes = notesElement.textContent.replace('Notes:', '').trim();

            // Populate form
            document.getElementById('familyCondition').value = condition;
            document.getElementById('addNotes').value = notes;

            const relatives = relativesStr.split(',').map(r => r.trim());

            // Reset and select appropriate relative buttons
            document.querySelectorAll('.relatives-container .profile-modal-button').forEach(btn => {
              const isSelected = relatives.includes(btn.getAttribute('data-value'));
              btn.removeAttribute('data-selected');
              btn.setAttribute('aria-pressed', isSelected ? 'true' : 'false');
              if (isSelected) {
                btn.setAttribute('data-selected', 'true');
              }
            });

            // Set hidden relatives input
            document.getElementById('relatives').value = relatives.join(',');

            // Add hidden fields for edit action and entry ID
            const form = document.getElementById('familyHistoryForm');
            let actionInput = document.getElementById('action');
            let entryIdInput = document.getElementById('entryId');

            if (!actionInput) {
              actionInput = document.createElement('input');
              actionInput.type = 'hidden';
              actionInput.id = 'action';
              actionInput.name = 'action';
              form.appendChild(actionInput);
            }
            actionInput.value = 'edit';

            if (!entryIdInput) {
              entryIdInput = document.createElement('input');
              entryIdInput.type = 'hidden';
              entryIdInput.id = 'entryId';
              entryIdInput.name = 'entryId';
              form.appendChild(entryIdInput);
            }
            entryIdInput.value = entryId;

            // Show modal
            const modal = document.querySelector('.modal-wrapper-2');
            openModal(modal);
          } catch (error) {
            console.error('Error preparing edit form:', error);
            alert('Could not load family history entry for editing.');
          }
        });
      });
      // Lifestyle edit entry functionality
      document.querySelectorAll('.lifestyle-entry .edit-entry-button').forEach(button => {
        button.addEventListener('click', async function () {
          console.log('Lifestyle Edit button clicked');
          const entryId = this.getAttribute('data-id');
          const entry = this.closest('.lifestyle-entry');

          try {
            // Get existing data with corrected selectors
            const habitTypeElement = entry.querySelector('.form-info:nth-child(1) p');
            const statusElement = entry.querySelector('.form-info:nth-child(2) p');
            const notesElement = entry.querySelector('.form-info:nth-child(3) p');

            if (!habitTypeElement || !statusElement || !notesElement) {
              throw new Error('Could not find all required elements');
            }

            const habitType = habitTypeElement.textContent.replace('Habit Type:', '').trim();
            const statusStr = statusElement.textContent.replace('Status:', '').trim();
            const notes = notesElement.textContent.replace('Notes:', '').trim();

            console.log('Found data:', { habitType, statusStr, notes }); // Debug log

            // Populate the modal form
            document.getElementById('habitType').value = habitType;
            document.getElementById('lifestyleNotes').value = notes;

            // Reset and select appropriate status button
            document.querySelectorAll('.status-container .profile-modal-button').forEach(btn => {
              const isSelected = btn.getAttribute('data-value') === statusStr;
              if (isSelected) {
                btn.setAttribute('data-selected', 'true');
                btn.setAttribute('aria-pressed', 'true');
              } else {
                btn.removeAttribute('data-selected');
                btn.setAttribute('aria-pressed', 'false');
              }
            });

            // Set hidden status input value
            document.getElementById('status').value = statusStr;

            // Add hidden fields for edit action and entry ID
            const form = document.getElementById('lifestyleForm');
            let actionInput = document.getElementById('action');
            let entryIdInput = document.getElementById('entryId');

            if (!actionInput) {
              actionInput = document.createElement('input');
              actionInput.type = 'hidden';
              actionInput.id = 'action';
              actionInput.name = 'action';
              form.appendChild(actionInput);
            }
            actionInput.value = 'edit';

            if (!entryIdInput) {
              entryIdInput = document.createElement('input');
              entryIdInput.type = 'hidden';
              entryIdInput.id = 'entryId';
              entryIdInput.name = 'entryId';
              form.appendChild(entryIdInput);
            }
            entryIdInput.value = entryId;

            // Show the modal
            const modal = document.querySelector('.modal-wrapper-3');
            openModal(modal);
          } catch (error) {
            console.error('Error preparing lifestyle edit form:', error);
            alert('Could not load lifestyle entry for editing.');
          }
        });
      });
      // Family History Delete entry functionality
      document.querySelectorAll('.family-history-entry .delete-entry-button').forEach(button => {
        button.addEventListener('click', async function () {
          if (!confirm('Are you sure you want to delete this entry?')) return;

          const entryId = this.getAttribute('data-id');
          const entry = this.closest('.family-history-entry');

          try {
            const response = await fetch('/update-profile', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                action: 'delete',
                entryId: entryId
              })
            });

            if (!response.ok) throw new Error('Network response was not ok');

            const result = await response.json();

            if (result.success) {
              entry.remove();
              const historyContainer = document.querySelector('.history-info');
              if (!historyContainer.querySelector('.family-history-entry')) {
                historyContainer.innerHTML = '<div class="form-info">No family history or genetic conditions reported</div>';
              }
            } else {
              throw new Error(result.message || 'Failed to delete entry');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete entry: ' + error.message);
          }
        });
      });
      // Lifestyle delete button functionality
      document.querySelectorAll('.lifestyle-entry .delete-entry-button').forEach(button => {
        button.addEventListener('click', async function () {
          if (!confirm('Are you sure you want to delete this habit?')) return;

          const entryId = this.getAttribute('data-id');
          const entry = this.closest('.lifestyle-entry');

          try {
            const response = await fetch('/update-profile', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                action: 'delete',
                entryId: entryId,
                type: 'lifestyle' // Add this to differentiate from family history
              })
            });

            if (!response.ok) throw new Error('Network response was not ok');

            const result = await response.json();

            if (result.success) {
              entry.remove();
              const lifestyleContainer = document.querySelector('.history-info');
              if (!lifestyleContainer.querySelector('.lifestyle-entry')) {
                lifestyleContainer.innerHTML = '<div class="form-info">No lifestyle habits recorded</div>';
              }
            } else {
              throw new Error(result.message || 'Failed to delete entry');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete lifestyle entry: ' + error.message);
          }
        });
      });
      // Button Click Handlers
      if (editIconButton) {
        editIconButton.addEventListener('click', (e) => {
          e.preventDefault();
          const targetModal = document.querySelector('.modal-wrapper-1');
          if (targetModal) openModal(targetModal);
        });
      }

      if (updateProfileButton) {
        updateProfileButton.addEventListener('click', (e) => {
          e.preventDefault();
          const targetModal = document.querySelector('.modal-wrapper-1');
          if (targetModal) openModal(targetModal);
        });
      }

      if (addFamilyHistoryButton) {
        addFamilyHistoryButton.addEventListener('click', (e) => {
          e.preventDefault();
          clearFamilyHistoryForm();
          const targetModal = document.querySelector('.modal-wrapper-2');
          if (targetModal) openModal(targetModal);
        });
      }

      if (addLifestyleButton) {
        addLifestyleButton.addEventListener('click', (e) => {
          e.preventDefault();
          const targetModal = document.querySelector('.modal-wrapper-3');
          if (targetModal) openModal(targetModal);
        });
      }

      // Modal Close Handlers
      document.querySelectorAll('.modal-background, .modal-return-button, .cancel-button').forEach(element => {
        element.addEventListener('click', (e) => {
          const parentModal = element.closest('.modal-wrapper, .modal-wrapper-1, .modal-wrapper-2, .modal-wrapper-3');
          if (parentModal) closeModal(parentModal);
        });
      });

      // Basic Info Form Submission
      document.getElementById('basicInfoForm')?.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch('/update-profile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          const result = await response.json();
          if (result.success) {
            // Update the displayed information
            const ageDisplay = document.getElementById('ageDisplay');
            const bloodTypeDisplay = document.getElementById('bloodTypeDisplay');
            const sexDisplay = document.getElementById('sexDisplay');

            if (ageDisplay) {
              ageDisplay.textContent = result.age || '-';
            }
            if (bloodTypeDisplay) {
              if (result.bloodType === 'Other') {
                bloodTypeDisplay.textContent = result.customBloodType || '-';
              } else {
                bloodTypeDisplay.textContent = result.bloodType || '-';
              }
            }
            if (sexDisplay) {
              sexDisplay.textContent = result.sex || '-';
            }

            // Close the modal
            const modal = this.closest('.modal-wrapper, .modal-wrapper-1');
            if (modal) {
              closeModal(modal);
            }
          } else {
            throw new Error(result.message || 'Failed to update profile');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to update profile: ' + error.message);
        }
      });

      // Family history Form Submission
      document.getElementById('familyHistoryForm')?.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        if (!data.action) {
          data.action = 'add';
        }

        try {
          const response = await fetch('/update-profile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          if (!response.ok) throw new Error('Network response was not ok');

          const result = await response.json();
          if (result.success) {
            window.location.reload();
          } else {
            throw new Error(result.message || 'Failed to update entry');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to save changes: ' + error.message);
        }
      });

      // Lifestyle Form Submission
      document.getElementById('lifestyleForm')?.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        if (!data.action) {
          data.action = 'add';
        }

        try {
          const response = await fetch('/update-profile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          if (!response.ok) throw new Error('Network response was not ok');

          const result = await response.json();
          if (result.success) {
            window.location.reload();
          } else {
            throw new Error(result.message || 'Failed to update entry');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to save changes: ' + error.message);
        }
      });

      // =========== Button Selection Handlers =========== //

      // Sex Buttons
      document.querySelectorAll('.sex-container .profile-modal-button').forEach(button => {
        button.addEventListener('click', function () {
          // Remove selected state from all sex buttons
          const sexContainer = this.closest('.sex-container');
          sexContainer.querySelectorAll('.profile-modal-button').forEach(btn => {
            btn.removeAttribute('data-selected');
            btn.setAttribute('aria-pressed', 'false');
          });

          // Add selected state to clicked button
          this.setAttribute('data-selected', 'true');
          this.setAttribute('aria-pressed', 'true');

          // Update hidden input
          const sexInput = document.getElementById('sex');
          if (sexInput) {
            sexInput.value = this.getAttribute('data-value');
          }
        });
      });

      // Relative Buttons
      document.querySelectorAll('.relatives-container .profile-modal-button').forEach(button => {
        button.addEventListener('click', function () {
          const relativesContainer = this.closest('.relatives-container');

          // Toggle selected state
          if (this.hasAttribute('data-selected')) {
            this.removeAttribute('data-selected');
            this.setAttribute('aria-pressed', 'false');
          } else {
            this.setAttribute('data-selected', 'true');
            this.setAttribute('aria-pressed', 'true');
          }

          // Update hidden input with all selected relatives
          const selectedButtons = relativesContainer.querySelectorAll('[data-selected]');
          const selectedValues = Array.from(selectedButtons).map(btn => btn.getAttribute('data-value'));
          document.getElementById('relatives').value = selectedValues.join(',');
        });
      });

      // Status Buttons (single select)
      document.querySelectorAll('.status-container .profile-modal-button').forEach(button => {
        button.addEventListener('click', function () {
          const relativesContainer = this.closest('.status-container');

          // Remove selected state from all status buttons
          statusContainer.querySelectorAll('.profile-modal-button').forEach(btn => {
            btn.removeAttribute('data-selected');
            btn.setAttribute('aria-pressed', 'false');
          });

          // Add selected state to clicked button
          this.setAttribute('data-selected', 'true');
          this.setAttribute('aria-pressed', 'true');

          // Update hidden input
          const statusInput = document.getElementById('status');
          if (statusInput) {
            statusInput.value = this.getAttribute('data-value');
          }
        });
      });

      // Initialize
      checkBloodType();
    });
  </script>


</body>

</html>