<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Index</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>

  <body class="home-body">
    {{> header pageTitle="Health Tracker"}} {{> feedbackWidget}}

    <section class="hero content-container">
      <div class="hero-container">
        <h1 class="hero-title">
          <span class="hero-text">Your secure</span>
          <span class="hero-text">and easy-to-use</span>
          <span class="hero-text">personalized</span> 
          <span class="hero-text">health tracker</span>
        </h1>
        <a href="/demo" class="button-basics btn-primary">
          <div class="flex-horizontal">Try the demo</div>
        </a>
      </div>
      <img
        src="images/iphonelayered.png"
        loading="lazy"
        alt="Mobile app demonstration"
        class="mobile"
      />
    </section>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern1}}
      </div>
    </div>

    <!-- New animated hero section -->
    <div class="hero-wrapper" id="scrollHero">
      <h1 class="quote-3">Perfect for you if you are</h1>
      
      <div class="use-cases-container">
        <div class="use-cases-navigation">
          <div class="nav-indicator"></div>
          <button class="nav-dot" data-index="0"><span>1</span></button>
          <button class="nav-dot" data-index="1"><span>2</span></button>
          <button class="nav-dot" data-index="2"><span>3</span></button>
          <button class="nav-dot" data-index="3"><span>4</span></button>
          <button class="nav-dot" data-index="4"><span>5</span></button>
        </div>
        
        <div class="use-cases-slider">
          <div class="use-case-card" data-index="0">
            <div class="icon-circle">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z" />
              </svg>
            </div>
            <h3>Trying to be proactive with your health</h3>
            <p>Pick up on out-of-range biomarkers and trends earlier</p>
          </div>
          
          <div class="use-case-card" data-index="1">
            <div class="icon-circle">
              <svg viewBox="0 0 24 24">
                <path d="M12 21a9 9 0 1 1 0-18 9 9 0 0 1 0 18zm0-2a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm1-8h3v2h-5V7h2v4z" />
              </svg>
            </div>
            <h3>Managing chronic conditions</h3>
            <p>Track symptoms, medications, and progress over time</p>
          </div>
          
          <div class="use-case-card" data-index="2">
            <div class="icon-circle">
              <svg viewBox="0 0 24 24">
                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
              </svg>
            </div>
            <h3>Caring for loved ones</h3>
            <p>Keep track of appointments and medical history</p>
          </div>
          
          <div class="use-case-card" data-index="3">
            <div class="icon-circle">
              <svg viewBox="0 0 24 24">
                <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" />
              </svg>
            </div>
            <h3>Searching for a diagnosis</h3>
            <p>Document symptoms and track patterns</p>
          </div>
          
          <div class="use-case-card" data-index="4">
            <div class="icon-circle">
              <svg viewBox="0 0 24 24">
                <path d="M13.5 2c-5.629 0-10.212 4.436-10.475 10h-3.025l4.537 5.917 4.463-5.917h-2.975c.26-3.902 3.508-7 7.475-7 4.136 0 7.5 3.364 7.5 7.5s-3.364 7.5-7.5 7.5c-2.381 0-4.502-1.119-5.876-2.854l-1.847 2.449c1.919 2.088 4.664 3.405 7.723 3.405 5.798 0 10.5-4.702 10.5-10.5s-4.702-10.5-10.5-10.5z" />
              </svg>
            </div>
            <h3>Boosting overall health</h3>
            <p>Monitor wellness metrics and lifestyle factors</p>
          </div>
        </div>
      </div>
      
      <!-- Hidden spacer to create scroll range -->
      <div class="scroll-spacer"></div>
    </div>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern2}}
      </div>
    </div>

    <div class="quote-background-1">
      <div class="content-container quote-container-1">
        <div class="quote-1">
          Optimize your health with unique and actionable insights
        </div>
      </div>
    </div>

    <div class="dashboard-img">
      <div class="content-container">
        <img
          src="images/Dashboard.png"
          loading="lazy"
          width="Auto"
          height="Auto"
          alt=""
          class="demo-page-img"
        />
      </div>
    </div>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern3}}
      </div>
    </div>

    <div class="quote-background-2">
      <div class="content-container quote-container-2">
        <div class="quote-2">
          &quot;This (system) change will not happen by the medical
          establishment, either; it will happen only if and when patients and
          physicians demand it&quot; <br />- Dr. Peter Attia in his book
          Outlive
        </div>
      </div>
    </div>

    <div class="wave-light-bg">
        <div class="wave-pattern">
          {{> svg/wavePattern5}}
        </div>
    </div>

    {{> footer}}

    <script src="js/main.js" defer type="module"></script>
    <script> // animated hero section (floating dots)
      function createDots() {
        const container = document.getElementById("floatingDots");
        const dotCount = 20;

        for (let i = 0; i < dotCount; i++) {
          const dot = document.createElement("div");
          dot.className = "dot";

          // Random size between 5 and 20px
          const size = Math.random() * 15 + 5;
          dot.style.width = `${size}px`;
          dot.style.height = `${size}px`;

          // Random starting position
          dot.style.left = `${Math.random() * 100}%`;
          dot.style.top = `${Math.random() * 100}%`;

          // Random animation duration between 15 and 30 seconds
          dot.style.animationDuration = `${Math.random() * 15 + 15}s`;

          // Random delay
          dot.style.animationDelay = `${Math.random() * -30}s`;

          container.appendChild(dot);
        }
      }

      // Initialize dots
      createDots();

      // Add hover effect to use cases
      document.querySelectorAll(".use-case").forEach((card) => {
        card.addEventListener("mouseenter", () => {
          card.querySelector(".icon-circle").style.transform =
            "translateX(-50%) scale(1.1)";
        });

        card.addEventListener("mouseleave", () => {
          card.querySelector(".icon-circle").style.transform =
            "translateX(-50%) scale(1)";
        });
      });
    </script>
    <script> // Animation handling
      document.addEventListener("DOMContentLoaded", () => {
        // Flag to track if animations have played during this session
        let animationsHavePlayed = false;

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const title = entry.target;

              if (entry.isIntersecting && !animationsHavePlayed) {
                // First time seeing the title - play animations
                title.style.visibility = "visible";
                
                // Make image and button visible for animations to work
                document.querySelector(".mobile").style.visibility = "visible";
                document.querySelector(".btn-primary").style.visibility = "visible";
                
                animationsHavePlayed = true;
              } else if (entry.isIntersecting && animationsHavePlayed) {
                // Already seen the title - show without animations
                title.style.visibility = "visible";

                // Remove animations and show content immediately
                document.querySelectorAll(".hero-text, .mobile, .btn-primary").forEach((el) => {
                  el.style.animation = "none";
                  el.style.opacity = "1";
                  el.style.transform = "none";
                  el.style.visibility = "visible";
                });

                // Handle secure-text element specifically
                const secureText = document.querySelector(".secure-text");
                if (secureText) {
                  secureText.style.color = "#5cb15d"; // Ensure color is applied when animations are skipped
                }
              }
            });
          },
          {
            threshold: 0.5,
          }
        );

        observer.observe(document.querySelector(".hero-title"));
      });
    </script>
    <script> // Scroll-based hero slider functionality
      // Modify this section in your existing JS
document.addEventListener('DOMContentLoaded', function() {
  const heroSection = document.getElementById('scrollHero');
  if (!heroSection) return;
  
  const heroNavDots = heroSection.querySelectorAll('.nav-dot');
  const heroCards = heroSection.querySelectorAll('.use-case-card');
  const scrollSpacer = heroSection.querySelector('.scroll-spacer');
  
  if (heroNavDots.length === 0 || heroCards.length === 0) return;
  
  // Set initial state
  let heroCurrentIndex = 0;
  let lastScrollTop = 0;
  let isAnimating = false;
  
  // Calculate the height needed for each card transition
  const totalCards = heroCards.length;
  const viewportHeight = window.innerHeight;
  const cardHeight = viewportHeight * 0.8; // Each card takes 80% of viewport
  const totalScrollHeight = cardHeight * totalCards;
  
  // Ensure scroll spacer has correct height
  if (scrollSpacer) {
    scrollSpacer.style.height = `${totalScrollHeight}px`;
    scrollSpacer.style.marginBottom = `-${totalScrollHeight}px`;
  }
  
  // Initialize first card
  updateActiveCard(0);
  
  // Function to update active card
  function updateActiveCard(index) {
    // Your existing updateActiveCard function code...
  }
  
  // Listen for scroll events
  window.addEventListener('scroll', function() {
    const scrollTop = window.scrollY;
    const heroTop = heroSection.offsetTop;
    
    // Only process when scrolling through the hero section + spacer
    if (scrollTop >= heroTop && scrollTop < (heroTop + totalScrollHeight)) {
      // Calculate which card should be active based on scroll position
      const relativeScroll = scrollTop - heroTop;
      const targetIndex = Math.min(Math.floor(relativeScroll / cardHeight), totalCards - 1);
      
      // Only update if the index has changed
      if (targetIndex !== heroCurrentIndex) {
        console.log(`Scrolling to card ${targetIndex}, scroll pos: ${scrollTop}`); // Debug logging
        updateActiveCard(targetIndex);
      }
    } else if (scrollTop < heroTop && heroCurrentIndex !== 0) {
      // If scrolling above hero section, set to first card
      updateActiveCard(0);
    } else if (scrollTop >= (heroTop + totalScrollHeight) && heroCurrentIndex !== totalCards - 1) {
      // If scrolling below hero + spacer, set to last card
      updateActiveCard(totalCards - 1);
    }
    
    // Update last scroll position
    lastScrollTop = scrollTop;
  });
  
  // Rest of your click and keyboard handling code...
});
    </script>
    <script src="/js/feedbackWidget.js"></script>
  </body>
</html>
