<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
    <title>Index</title>
    <link href="css/main-styles.css" rel="stylesheet" type="text/css" />
    <link href="css/main-header-footer-styles.css" rel="stylesheet" type="text/css" />
    <link href="css/index-styles.css" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap" rel="stylesheet">
  </head>

  <body class="home-body">
    {{> header pageTitle="Health Tracker"}} {{> feedbackWidget}}
    {{> mobileHeader}}

    <section class="hero content-container">
      <div class="hero-container">
        <!-- Desktop: Text content on left -->
        <div class="hero-content">
          <h1 class="hero-title">
            <span class="hero-text">Your secure</span>
            <span class="hero-text">and easy-to-use</span>
            <span class="hero-text">personalized</span> 
            <span class="hero-text">health portal</span>
          </h1>
          <!-- Desktop button - hidden on mobile -->
          <a href="/register" class="button-basics btn-primary desktop-only">
            <div class="flex-horizontal">TRY IT OUT</div>
          </a>
        </div>
        
        <!-- Mobile image - appears after text on mobile, on right on desktop -->
        <img
          src="images/iphonelayered.png"
          loading="lazy"
          alt="Mobile app demonstration"
          class="mobile"
        />
      </div>
      
      <!-- Mobile button - OUTSIDE container, only shows on mobile -->
      <a href="/register" class="button-basics btn-primary mobile-only">
        <div class="flex-horizontal">TRY IT OUT</div>
      </a>
    </section>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern1}}
      </div>
    </div>

    <div class="use-cases-section">
      <div class="content-container-2">
        <h2 class="quote-3">Perfect for you if you are</h2>
        
        <div class="use-cases-container">
          <!-- Navigation dots -->
          {{!-- <div class="use-cases-navigation">
            <button class="nav-dot active" data-index="0" aria-label="Slide 1" aria-selected="true"></button>
            <button class="nav-dot" data-index="1" aria-label="Slide 2" aria-selected="false"></button>
            <button class="nav-dot" data-index="2" aria-label="Slide 3" aria-selected="false"></button>
            <button class="nav-dot" data-index="3" aria-label="Slide 4" aria-selected="false"></button>
            <button class="nav-dot" data-index="4" aria-label="Slide 5" aria-selected="false"></button>
          </div> --}}
          
          <!-- Card slider -->
          <div class="use-cases-slider">
            <div class="use-case-card active" data-index="0">
              <div class="icon-circle">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z" />
                </svg>
              </div>
              <h3>Trying to be proactive with your health</h3>
              <p>Our insights allow you to be proactive rather than reactive</p>
            </div>
        
            <div class="use-case-card" data-index="1">
              <div class="icon-circle">
                <svg viewBox="0 0 24 24">
                  <path d="M12 21a9 9 0 1 1 0-18 9 9 0 0 1 0 18zm0-2a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm1-8h3v2h-5V7h2v4z" />
                </svg>
              </div>
              <h3>Managing chronic conditions</h3>
              <p>Track symptoms, correlations, and progress over time</p>
            </div>
        
            <div class="use-case-card" data-index="2">
              <div class="icon-circle">
                <svg viewBox="0 0 24 24">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                </svg>
              </div>
              <h3>Caring for loved ones</h3>
              <p>Helps reduce the burden of stressful researching</p>
            </div>
        
            <div class="use-case-card" data-index="3">
              <div class="icon-circle">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5q0-2.725 1.888-4.612T9.5 3q2.725 0 4.612 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3zM9.5 14q1.875 0 3.188-1.312T14 9.5q0-1.875-1.312-3.188T9.5 5Q7.625 5 6.312 6.312T5 9.5q0 1.875 1.312 3.188T9.5 14"/>
                </svg>
              </div>
              <h3>Searching for a diagnosis</h3>
              <p>Document symptoms and track patterns to make healthcare visits more effective</p>
            </div>
        
            <div class="use-case-card" data-index="4">
              <div class="icon-circle">
                <svg viewBox="0 0 24 24">
                  <path d="M13.5 2c-5.629 0-10.212 4.436-10.475 10h-3.025l4.537 5.917 4.463-5.917h-2.975c.26-3.902 3.508-7 7.475-7 4.136 0 7.5 3.364 7.5 7.5s-3.364 7.5-7.5 7.5c-2.381 0-4.502-1.119-5.876-2.854l-1.847 2.449c1.919 2.088 4.664 3.405 7.723 3.405 5.798 0 10.5-4.702 10.5-10.5s-4.702-10.5-10.5-10.5z" />
                </svg>
              </div>
              <h3>Boosting overall health</h3>
              <p>Monitor wellness metrics and lifestyle factors</p>
            </div>
          </div>
          
          <!-- Previous/Next controls -->
          <div class="slider-controls">
            <button class="slider-prev" aria-label="Previous slide">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </button>
            <button class="slider-next" aria-label="Next slide">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern2}}
      </div>
    </div>

    <div class="quote-background-1">
      <div class="content-container quote-container-1">
        <h1 class="quote-1">
          Optimize your health with unique actionable insights
        </h1>
      </div>
    </div>

    <div class="dashboard-img">
      <div class="content-container">
        <img
          src="images/Dashboard.png"
          loading="lazy"
          width="Auto"
          height="Auto"
          alt=""
          class="demo-page-img"
        />
      </div>
    </div>

    <div class="wave-light-bg">
      <div class="wave-pattern">
        {{> svg/wavePattern3}}
      </div>
    </div>

    <div class="quote-background-2">
      <div class="content-container quote-container-2">
        <div class="quote-2">
          &quot;This (system) change will not happen by the medical
          establishment, either; it will happen only if and when patients and
          physicians demand it&quot;
        </div>
        <div class="quote-2-by">- Dr. Peter Attia in his book
          Outlive</div>
      </div>
    </div>

    <div class="wave-light-bg">
        <div class="wave-pattern">
          {{> svg/wavePattern5}}
        </div>
    </div>

    {{> footer}}

    <script src="js/main.js" defer type="module"></script>
    <script src="js/main-mobile.js" defer type="module"></script>
    <script> // animated hero section (floating dots)
      function createDots() {
        const container = document.getElementById("floatingDots");
        
        // Check if container exists before trying to append to it
        if (!container) {
          console.warn("Element with ID 'floatingDots' not found. Skipping dot creation.");
          return; // Exit the function early if container doesn't exist
        }
        
        const dotCount = 20;

        for (let i = 0; i < dotCount; i++) {
          const dot = document.createElement("div");
          dot.className = "dot";

          // Random size between 5 and 20px
          const size = Math.random() * 15 + 5;
          dot.style.width = `${size}px`;
          dot.style.height = `${size}px`;

          // Random starting position
          dot.style.left = `${Math.random() * 100}%`;
          dot.style.top = `${Math.random() * 100}%`;

          // Random animation duration between 15 and 30 seconds
          dot.style.animationDuration = `${Math.random() * 15 + 15}s`;

          // Random delay
          dot.style.animationDelay = `${Math.random() * -30}s`;

          container.appendChild(dot);
        }
      }

      // Add hover effect to use cases
      document.querySelectorAll(".use-case").forEach((card) => {
        card.addEventListener("mouseenter", () => {
          card.querySelector(".icon-circle").style.transform =
            "translateX(-50%) scale(1.1)";
        });

        card.addEventListener("mouseleave", () => {
          card.querySelector(".icon-circle").style.transform =
            "translateX(-50%) scale(1)";
        });
      });
    </script>
    <script> // Animation handling
      document.addEventListener("DOMContentLoaded", () => {
        // Flag to track if animations have played during this session
        let animationsHavePlayed = false;

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const title = entry.target;

              if (entry.isIntersecting && !animationsHavePlayed) {
                // First time seeing the title - play animations
                title.style.visibility = "visible";
                
                // Make image visible for animations
                const mobileImage = document.querySelector(".mobile");
                const button = document.querySelector(".btn-primary");
                
                if (mobileImage) mobileImage.style.visibility = "visible";
                if (button) button.style.visibility = "visible";
                
                animationsHavePlayed = true;
              } else if (entry.isIntersecting && animationsHavePlayed) {
                // Already seen the title - show without animations
                title.style.visibility = "visible";

                // Remove animations and show content immediately
                document.querySelectorAll(".hero-text, .mobile").forEach((el) => {
                  el.style.animation = "none";
                  el.style.opacity = "1";
                  el.style.transform = "none";
                  el.style.visibility = "visible";
                });

                // Handle button - remove animations and show
                const button = document.querySelector(".btn-primary");
                if (button) {
                  button.style.animation = "none";
                  button.style.opacity = "1";
                  button.style.transform = "none";
                  button.style.visibility = "visible";
                  button.style.display = "inline-flex";
                }

                // Handle secure-text element specifically
                const secureText = document.querySelector(".secure-text");
                if (secureText) {
                  secureText.style.color = "#5cb15d";
                }
              }
            });
          },
          {
            threshold: 0.5,
          }
        );

        observer.observe(document.querySelector(".hero-title"));
        
        // Removed resize listener since we no longer need to handle mobile/desktop button switching
      });
    </script>
    <script> // Hero scrolling animation
      function initCardSlider() {
        const slider = document.querySelector('.use-cases-slider');
        if (!slider) return; // Exit if slider doesn't exist on page
        
        const cards = slider.querySelectorAll('.use-case-card');
        const navDots = document.querySelectorAll('.nav-dot');
        const prevButton = document.querySelector('.slider-prev');
        const nextButton = document.querySelector('.slider-next');
        
        let currentIndex = 0;
        let autoplayInterval;
        
        // Function to show a specific card
        function showCard(index) {
          // Ensure index is within bounds
          if (index < 0) index = cards.length - 1;
          if (index >= cards.length) index = 0;
          
          currentIndex = index;
          
          // Update cards
          cards.forEach((card, i) => {
            card.classList.toggle('active', i === currentIndex);
            // Add smooth transition between cards
            if (i === currentIndex) {
              card.style.opacity = '1';
              card.style.visibility = 'visible';
              card.style.transform = 'translateX(0)';
            } else {
              card.style.opacity = '0';
              card.style.visibility = 'hidden';
              card.style.transform = 'translateX(50px)';
            }
          });
          
          // Update navigation dots
          navDots.forEach((dot, i) => {
            dot.classList.toggle('active', i === currentIndex);
            // Add ARIA attributes for accessibility
            dot.setAttribute('aria-selected', i === currentIndex ? 'true' : 'false');
          });
        }
        
        // Set up navigation dot clicks
        navDots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            showCard(index);
            resetAutoplay();
          });
        });
        
        // Set up next/prev buttons
        if (prevButton) {
          prevButton.addEventListener('click', () => {
            showCard(currentIndex - 1);
            resetAutoplay();
          });
        }
        
        if (nextButton) {
          nextButton.addEventListener('click', () => {
            showCard(currentIndex + 1);
            resetAutoplay();
          });
        }
        
        // Function to start autoplay
        function startAutoplay() {
          stopAutoplay();
          autoplayInterval = setInterval(() => {
            showCard(currentIndex + 1);
          }, 5000); // Change slide every 5 seconds
        }
        
        // Function to stop autoplay
        function stopAutoplay() {
          if (autoplayInterval) {
            clearInterval(autoplayInterval);
          }
        }
        
        // Function to reset autoplay (when user interacts)
        function resetAutoplay() {
          stopAutoplay();
          startAutoplay();
        }
        
        // Add keyboard navigation
        document.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') {
            showCard(currentIndex - 1);
            resetAutoplay();
          } else if (e.key === 'ArrowRight') {
            showCard(currentIndex + 1);
            resetAutoplay();
          }
        });
        
        // Start autoplay
        startAutoplay();
        
        // Pause autoplay when user hovers over the slider
        slider.addEventListener('mouseenter', stopAutoplay);
        slider.addEventListener('mouseleave', startAutoplay);
        
        // Handle touch events for swiping
        let touchStartX = 0;
        let touchEndX = 0;
        
        slider.addEventListener('touchstart', (e) => {
          touchStartX = e.changedTouches[0].screenX;
        }, { passive: true });
        
        slider.addEventListener('touchend', (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }, { passive: true });
        
        function handleSwipe() {
          const swipeThreshold = 50; // Minimum swipe distance
          
          if (touchEndX < touchStartX - swipeThreshold) {
            // Swipe left - go to next slide
            showCard(currentIndex + 1);
            resetAutoplay();
          }
          
          if (touchEndX > touchStartX + swipeThreshold) {
            // Swipe right - go to previous slide
            showCard(currentIndex - 1);
            resetAutoplay();
          }
        }
        
        // Initialize with the first card
        showCard(0);
      }

      // Call this function on DOMContentLoaded in your initialization code
     document.addEventListener('DOMContentLoaded', function() {
      initCardSlider();
     });
    </script>
    {{!-- <script>  // Debug panel for scroll animation (keep commented until needed)
      (function() {
        console.log("Creating scroll animation debug panel");
        
        document.addEventListener('DOMContentLoaded', function() {
          // Wait for the main scroll animation to initialize
          setTimeout(function() {
            // Create debug panel
            const debugPanel = document.createElement('div');
            debugPanel.style.cssText = `
              position: fixed;
              bottom: 10px;
              right: 10px;
              width: 300px;
              padding: 12px;
              background-color: rgba(0, 0, 0, 0.8);
              color: white;
              font-family: monospace;
              font-size: 12px;
              border-radius: 5px;
              z-index: 10000;
              pointer-events: none;
              opacity: 0.9;
            `;
            
            document.body.appendChild(debugPanel);
            
            // Add control buttons
            const controlPanel = document.createElement('div');
            controlPanel.style.cssText = `
              position: fixed;
              bottom: 10px;
              left: 10px;
              display: flex;
              gap: 10px;
              z-index: 10000;
            `;
            
            const toggleButton = document.createElement('button');
            toggleButton.textContent = 'Toggle Debug';
            toggleButton.style.cssText = `
              padding: 5px 10px;
              background-color: #4CAF50;
              color: white;
              border: none;
              border-radius: 4px;
              cursor: pointer;
              font-family: Arial, sans-serif;
              font-size: 12px;
            `;
            
            const resetButton = document.createElement('button');
            resetButton.textContent = 'Reset Cards';
            resetButton.style.cssText = `
              padding: 5px 10px;
              background-color: #2196F3;
              color: white;
              border: none;
              border-radius: 4px;
              cursor: pointer;
              font-family: Arial, sans-serif;
              font-size: 12px;
            `;
            
            controlPanel.appendChild(toggleButton);
            controlPanel.appendChild(resetButton);
            document.body.appendChild(controlPanel);
            
            // Button functionality
            toggleButton.addEventListener('click', function(e) {
              e.stopPropagation();
              debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
            });
            
            resetButton.addEventListener('click', function(e) {
              e.stopPropagation();
              
              // Reset cards to initial state
              const cards = document.querySelectorAll('.use-case-card');
              const navDots = document.querySelectorAll('.nav-dot');
              
              cards.forEach((card, i) => {
                if (i === 0) {
                  card.classList.add('active');
                  card.style.opacity = '1';
                  card.style.visibility = 'visible';
                } else {
                  card.classList.remove('active');
                  card.style.opacity = '0';
                  card.style.visibility = 'hidden';
                }
              });
              
              navDots.forEach((dot, i) => {
                dot.classList.toggle('active', i === 0);
              });
              
              console.log("Cards reset to initial state");
              
              // Scroll back to top of hero section
              const heroSection = document.getElementById('scrollHero');
              if (heroSection) {
                window.scrollTo({
                  top: heroSection.offsetTop,
                  behavior: 'smooth'
                });
              }
            });
            
            // Get elements needed for debugging
            const heroSection = document.getElementById('scrollHero');
            const scrollSpacer = heroSection?.querySelector('.scroll-spacer');
            const cards = heroSection?.querySelectorAll('.use-case-card');
            const navDots = heroSection?.querySelectorAll('.nav-dot');
            
            // Determine trigger points (same calculation as main script)
            const triggerPoints = [];
            if (cards && heroSection) {
              const cardCount = cards.length;
              const viewportHeight = window.innerHeight;
              const heroTop = heroSection.offsetTop;
              
              for (let i = 0; i < cardCount; i++) {
                triggerPoints.push(heroTop + (i * viewportHeight * 0.6));
              }
            }
            
            // Helper function to get active card index
            function getActiveCardIndex() {
              let activeIndex = -1;
              cards?.forEach((card, index) => {
                if (card.classList.contains('active')) {
                  activeIndex = index;
                }
              });
              return activeIndex;
            }
            
            // Update debug info on scroll
            window.addEventListener('scroll', function() {
              if (!heroSection) {
                debugPanel.innerHTML = "ERROR: Hero section not found!";
                return;
              }
              
              const scrollTop = window.scrollY;
              const heroTop = heroSection.offsetTop;
              const heroHeight = heroSection.offsetHeight;
              const spacerHeight = scrollSpacer ? scrollSpacer.offsetHeight : 0;
              const heroPosition = window.getComputedStyle(heroSection).position;
              const heroZIndex = window.getComputedStyle(heroSection).zIndex;
              
              // Find current zone based on scroll position
              let currentZone = -1;
              for (let i = triggerPoints.length - 1; i >= 0; i--) {
                if (scrollTop >= triggerPoints[i]) {
                  currentZone = i;
                  break;
                }
              }
              
              // Generate debug output
              debugPanel.innerHTML = `
                <div style="margin-bottom: 10px; font-weight: bold; border-bottom: 1px solid #555; padding-bottom: 6px;">Scroll Animation Debug</div>
                
                <div style="margin-bottom: 12px;">
                  <div style="display: flex; justify-content: space-between;">
                    <span>Scroll position:</span>
                    <span>${scrollTop.toFixed(0)}px</span>
                  </div>
                  <div style="display: flex; justify-content: space-between;">
                    <span>Hero top:</span>
                    <span>${heroTop}px</span>
                  </div>
                  <div style="display: flex; justify-content: space-between;">
                    <span>Spacer height:</span>
                    <span>${spacerHeight}px</span>
                  </div>
                  <div style="display: flex; justify-content: space-between;">
                    <span>Current zone:</span>
                    <span style="color: ${currentZone >= 0 ? '#4CAF50' : '#FF5252'}">${currentZone}</span>
                  </div>
                  <div style="display: flex; justify-content: space-between;">
                    <span>Active card:</span>
                    <span style="color: ${getActiveCardIndex() >= 0 ? '#4CAF50' : '#FF5252'}">${getActiveCardIndex()}</span>
                  </div>
                </div>
                
                <div style="margin-bottom: 12px; border-bottom: 1px solid #555; padding-bottom: 6px;">
                  <div style="margin-bottom: 6px; font-weight: bold;">Trigger Points:</div>
                  ${triggerPoints.map((point, i) => `
                    <div style="display: flex; justify-content: space-between; margin-bottom: 2px;">
                      <span>Card ${i}:</span>
                      <span style="color: ${scrollTop >= point ? '#4CAF50' : '#FF5252'}">${point.toFixed(0)}px</span>
                    </div>
                  `).join('')}
                </div>
                
                <div style="margin-bottom: 8px; font-weight: bold; border-bottom: 1px solid #555; padding-bottom: 6px;">Element Status:</div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
                  <span>Position:</span>
                  <span style="color: ${heroPosition === 'sticky' ? '#4CAF50' : '#FF5252'}">${heroPosition}</span>
                </div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
                  <span>Z-Index:</span>
                  <span>${heroZIndex}</span>
                </div>
              `;
            }, { passive: true });
            
            console.log("Scroll animation debug panel initialized");
          }, 800); // Wait for main animation script to initialize
        });
      })();
    </script> --}}
    <script src="/js/feedbackWidget.js"></script>
  </body>
</html>
